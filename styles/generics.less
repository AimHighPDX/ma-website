/**
 * Sets some defaults for text and spacing.
 * Implements the correct overrides for some attributes.
**/

@padding: 1.5rem;

@text-padding-x: 1em;

@text-padding-y: .5em;
@text-padding: @text-padding-y @text-padding-x;

@radius: 1rem;
@button-radius: .5rem;

// tweak: { "type" : "value", "title" : "Maximum Central Content Width", "min" : 300, "max" : 2000, "step" : 50 }
@main-content-width-px: 800px;
@main-content-width: min(@main-content-width-px, 100%);

// tweak: { "type" : "value", "title" : "Non User Initiated Animation Time", "min" : 0, "max" : 5, "step" : .1 }
@transition-time: .5s;
// tweak: { "type" : "value", "title" : "User Initiated Animation Time", "min" : 0, "max" : 5, "step" : .1 }
@transition-time-user-init: .2s;

:root {
   font-size: 100%;
   font-family: 'Open Sans', 'sans-serif';

   --lightbox-height: (100vh - (2 * @padding));
   --lightbox-width: (100vw - (2 * @padding));
}

* {
   margin: 0;
   padding: 0;
   box-sizing: border-box;
   scroll-margin: @padding;
}

/* Typical accessibility settings */
@media (prefers-reduced-motion) {
   * {
      transition: 0s !important;
   }
}

main {
   display: grid;
   grid-template-columns: 1fr @main-content-width 1fr;
   > * {
      grid-column: 2;
      padding: @padding;
   }
}


[hidden] {
   display: none;
   visibility: hidden !important;
}

.visually-hidden {
   clip: rect(0 0 0 0);
   clip-path: inset(50%);
   height: 1px;
   overflow: hidden;
   position: absolute;
   white-space: nowrap;
   width: 1px;
}

// tweak: { "type" : "value", "title" : "Outline Width", "min" : .1, "max" : .5, "step" : .1, "category": "Focus Styles" }
@focus-outline-width: .1rem;
// tweak: { "type" : "value", "title" : "Outline Offset", "min" : -1, "max" : 1, "step" : .1, "category": "Focus Styles" }
@focus-outline-offset: .2rem;
:focus-visible {
   outline: @focus-outline-width solid @focus-color;
   outline-offset: @focus-outline-offset;

}

/* Text defaults */

h1, h2, h3 {
   font-family: bebas-neue-v14-deprecated,'Franklin Gothic Medium',sans-serif;
   letter-spacing: .1em;
}

h1, h2, h3, h4, h5, h6 {
   line-height: 1.2em;
   color: @text-color;
}
 
p {
   font-size: 1rem;
   line-height: 1.5em;
   color: @text-color;

   margin: .5em 0;
}

address {
   font-style: normal;
}

img {
   max-height: 100%;
   max-width: 100%;
   object-fit: contain;
   object-position: center;
}

/* Heading classes. Meant to emulate a different heading size, if needed. */
.small-text {
   font-size: .8rem;
}

h4, .heading-level4 {
   font-size: 1.2rem;
   font-weight: bold;
   margin-bottom: .1em;
}

h3, .heading-level3 {
   font-size: 2rem;
   margin-bottom: .1em;
}

h2, .heading-level2 {
   font-size: 2.8rem;
   margin-bottom: .1em;
}

h1, .heading-level1 {
   font-size: 3.5rem;
   margin-bottom: .2em;
}

.a-mixin() {
   color: @action;
   text-decoration: underline;
   border-radius: 1px;

   &.external::after {
      content: "*";
      color: red; 
   }

   &:hover {
      color: lighten(@action, @color-contrast-adjustment);
   }

   &:focus-visible {
      outline-offset: 2px;
   }
}

a:not(.button) {
   .a-mixin();
}


hr {
   border: .5px solid @white;
   padding: 0;
}

/* Buttons */
button, a.button {
   font: inherit;
   width: fit-content;
   min-width: 48px;
   min-height: 48px;
   
   cursor: pointer;
   
   display: flex;
   align-items: center;

   background-color: @action;
   color: inherit;
   text-decoration: none;

   padding: @text-padding;
   border-radius: @button-radius;
   border: none;
   box-shadow: @shadow;
   
   transition: @transition-time-user-init ease-out;

   &:not([disabled]):not([aria-disabled]) {
      &:hover {
         background-color: lighten(@action, @color-contrast-adjustment);
         box-shadow: @shadow-hover;
         color: inherit;
      }
   
      &:active {
         background-color: darken(@action, @color-contrast-adjustment);
         box-shadow: @shadow-pressed;
         color: inherit;
      }
   }

   &[disabled], &[aria-disabled] {
      pointer-events: none;
      background-color: desaturate(@action, @color-contrast-adjustment);
      box-shadow: none;
      transition: 0s;
   }

   &.secondary {
      background-color: transparent;
      color: @action;
      box-shadow: inset 0 0 0 max(2px, .08em) @action;
   }

   &.icon-button {
      padding: 0;
      gap: 0;
      justify-content: left;

      .icon {
         font-family: system-ui;
         display: flex;

         align-items: center;
         justify-content: center;

         margin: .5rem;
      }

      .text {
         margin: .5em;
      }

      &:has(.text.visually-hidden) {
         justify-content: center;
      }
   }

   &.disclosure {
      gap: .5em;

      &:not(.icon-button) {
         &::after {
            content:"❯";
            transition: transform @transition-time-user-init ease-in-out;
         }
   
         &[aria-expanded="false"]::after {
            transform: rotate(.25turn);
         }
   
         &[aria-expanded="true"]::after {
            transform: rotate(-.25turn);
         }
      }

      &.icon-button {
         transition: transform @transition-time-user-init ease-in-out;

         &[aria-expanded="false"] .icon {
            transform: rotate(.25turn);
         }
   
         &[aria-expanded="true"] .icon {
            transform: rotate(-.25turn);
         }
      }
   }
}

.button-set {
   display: flex;
   flex-wrap: wrap;
   gap: 1rem;
}

/* Navigation menu in header */
header {
   background: @background;
   color: @text-color;

   nav {
      display: grid;
      grid-template-columns: 1fr auto;
      align-items: center;
      gap: 1rem;

      ul {
         display: flex;
         flex-wrap: wrap;
         align-items: center;
         list-style-type: none;

         li {
            height: 100%;
            z-index: 100;
         }

         button.disclosure, a.button {
            background-color: transparent;
            color: @action;
            border-radius: 0;
            height: 100%;
            width: 100%;
            box-shadow: none;

            outline-offset: -.5rem;

            &[aria-current="page"] {
               text-decoration: underline;
               color: darken(@text-color, @interactive-color-adjustment);
               text-underline-offset: .2em;
            }

            &:not([disabled]):not([aria-disabled]):hover {
               box-shadow: none;
            }
         }

         button.disclosure[aria-expanded="true"] {
            background-color: @action;
            color: unset;
         }
      }

      .sub-nav > ul {
         position: absolute;
         flex-direction: column;
         align-items: stretch;
         background-color: @darkgray;
      }

      .logo {
         max-height: 60px;
         max-width: 175px;
         padding: .5rem;
      }
   }
}

dialog {
   width: clamp(100px, 30rem, var(--lightbox-width));
   max-height: var(--lightbox-height);

   border:none;
   border-radius: @radius;
   box-shadow: @shadow; 
   
   overflow: hidden;
   overscroll-behavior: contain;
}

html:has(.modal-dialog[open]) {
   overflow: hidden;
}

dialog::backdrop {
   background: @shadow-color;
   backdrop-filter: blur(2px);
   overscroll-behavior: contain;
}

dialog > div {
   overflow: hidden;
   display: grid;
   grid-template-rows: auto 1fr;
   max-height: inherit;
}

dialog header {
   position: sticky;
   top: 0;

   padding: @text-padding;
   width: 100%;
   height: min-content;

   display: flex;
   justify-content: space-between;
   align-items: center;
   background: inherit;
}

dialog .dialog-body {
   padding: @padding;
   overflow: auto;
}

dialog.modal-dialog {
   margin: auto;
}

/**
 * Form fields defaults.
**/

/* Reset stylings */
select, input, textarea {
   font: inherit;
}

fieldset {
   border: none;
}


/* Field baseline */
.form-field {
   display: flex;
   flex-direction: column;
   min-width: 10em;

   width: 100%;
   gap: .3rem;
   margin-top: .5rem;
}

.form-field:has(.field-input[hidden]) {
   display: none;
}

.field-required {
   display: none;
   color: @error-color;
   padding: 0 .3em;
}

.field-label:has(~ .field-input[required]) .field-required {
   display: inline-block;
}

.field-input {
   transition: .2s;
   border-radius: 5px;
   width: 100%;
   padding: .1em .2em;

   background: @background;
   border: max(1px, .04em) solid @gray;
   border-bottom: max(1.5px, .06em) solid @darkgray;  
}

.field-input:focus-visible {
   outline-offset: 0;
}

.field-error, .fieldset-error {
   color: @error-color;
   transition: .2s, visibility 0s;
   visibility: hidden;
   height: 0;
}







/* Dropdown Fields */
select.field-value {
   border: max(1px, .04em) solid @darkgray;
}


/* Checkboxes and Radios */
.form-field:has(> input[type=checkbox]), .form-field:has(> input[type=radio]) {
   display: inline-block;
}

.field-input[type=checkbox], .field-input[type=radio] {
   width: fit-content;
   accent-color: var(--action-color);
}

.field-input[type=checkbox]:focus-visible, .field-input[type=radio]:focus-visible {
   outline-offset: 2px;
}

.fieldset-radio[aria-required=true] .field-required, .fieldset-checkbox[data-required] .field-required {
   display: inline-block;
}

fieldset[aria-invalid=true]:not([pristine]) .fieldset-error {
   visibility: visible;
   height: fit-content;
}




/* Fieldsets */
fieldset {
   width: 100%;
   display: flex;
   flex-wrap: wrap;
   gap: 0 1rem;
   margin-top: .5rem;
}

fieldset:has(input[required]) legend > .field-required {
   display: inline-block;
}

/* Date variant of Fieldsets */
.fieldset-date {
   display: grid;
   grid-template-columns: repeat(3, auto) 1fr;
}

.fieldset-date > *:not(.form-field) {
   grid-column: 1 / -1;
}

.fieldset-date .form-field:has(input[autocomplete~=bday-day]), .fieldset-date .form-field:has(input[autocomplete~=bday-month]) {
   min-width: 2em;
   width: 3em;
}

.fieldset-date .form-field:has(input[autocomplete~=bday-year]) {
   min-width: 3em;
   width: 4em;
}

.fieldset-date:has(input:invalid:not([pristine])) .field-error {
   visibility: visible;
   height: fit-content;
}



/* Textarea */
textarea {
   resize: vertical;
}


/* Overall form errors don't show when the form has not been submitted nor if all inputs are valid. */
.form-error {
   border: max(2px, .08em) solid @error-color;
   color: @error-color;
}

form[pristine] .form-error, form:not(:has(:invalid)) .form-error {
   display: none;
}


/* Show errors when input field is invalid and has been edited */
.field-input:invalid:not([pristine]) ~ .field-error, 
form:not([pristine]) .field-input:invalid ~ .field-error {
   visibility: visible;
   height: fit-content;
}

/* Style invalid field inputs with red unless the field is focused, the field is pristine, or there has been a manual override */
.field-input:invalid:not([pristine]):not(:focus):not(.error-override), 
form:not([pristine]) .field-input:invalid:not(:focus):not(.error-override) {
   border-color: @error-color;
}

/* Remove red from error text if the field is focused or if there is a manual override */
.field-input:focus ~ .field-error,
.field-input.error-override ~ .field-error {
   color: inherit;
}



/** This css is specifically for address fields **/
.address-fieldset .form-field:has(.field-input[autocomplete*="address-level"]),
.address-fieldset .form-field:has(.field-input[autocomplete*="postal-code"]) {
   flex: 1 1 0;
   max-width: 15em;
}

.address-fieldset .form-field[hidden] {
   display: none;
}


/* make things centered */
.centered {
   margin: 0 auto;
   text-align: center;
}